{
  "active": true,
  "connections": {
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "có chứa tag kết thúc hay không ?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "MedGemma",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Surya + gemma3": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "MCP bệnh viện": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "RAG Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Postgres PGVector Store": {
      "ai_tool": [
        [
          {
            "node": "RAG Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "List Documents": {
      "ai_tool": [
        [
          {
            "node": "RAG Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Query Document Rows": {
      "ai_tool": [
        [
          {
            "node": "RAG Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get File Contents": {
      "ai_tool": [
        [
          {
            "node": "RAG Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "RAG Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "RAG Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "MedGemma",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RAG Agent": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "có chứa tag kết thúc hay không ?": {
      "main": [
        [],
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MedGemma": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-06-26T14:30:38.228Z",
  "id": "q3TQytS30yP8CI25",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "MindMap",
  "nodes": [
    {
      "parameters": {
        "model": "deepseek-r1-distill-llama-70b",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -340,
        200
      ],
      "id": "bc39a938-4bc9-4c37-a56c-0087d09fc05e",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "XG6ZrBFEIJ1KtuOu",
          "name": "Groq account 2"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -240,
        -180
      ],
      "id": "707acb38-bf56-46c5-b010-f7f72e8c48fd",
      "name": "AI Agent"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -180,
        180
      ],
      "id": "e5ca43c1-c606-42ec-80b0-14be9dbbb8e1",
      "name": "Postgres Chat Memory1",
      "credentials": {
        "postgres": {
          "id": "1YN20xd11svKzn15",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -540,
        -180
      ],
      "id": "90bbc987-8228-4c14-b3df-cfcc9e582b55",
      "name": "When chat message received",
      "webhookId": "2c443178-5a88-4bd0-8d8d-f03643ac01ab"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        840,
        120
      ],
      "id": "cbfa176c-264e-4001-a545-36a973475a15",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "PpcktPH83DDrHTki",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1,
      "position": [
        40,
        160
      ],
      "id": "f40b3451-1bd7-4a4a-90df-d3aaee418872",
      "name": "Surya + gemma3"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1,
      "position": [
        220,
        160
      ],
      "id": "e3319ce5-311b-4658-ab17-6edde0af7610",
      "name": "MCP bệnh viện"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=You are a personal assistant who helps answer questions from a corpus of documents. The documents are either text based (Txt, docs, extracted PDFs, etc.) or tabular data (CSVs or Excel documents).\n\nYou are given tools to perform RAG in the 'documents' table, look up the documents available in your knowledge base in the 'document_metadata' table, extract all the text from a given document, and query the tabular files with SQL in the 'document_rows' table.\n\nAlways start by performing RAG unless the users asks you to check a document or the question requires a SQL query for tabular data (fetching a sum, finding a max, something a RAG lookup would be unreliable for). If RAG doesn't help, then look at the documents that are available to you, find a few that you think would contain the answer, and then analyze those.\n\nAlways tell the user if you didn't find the answer. Don't make something up just to please them."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        920,
        -760
      ],
      "id": "88886117-e2a0-49a6-bb17-27041c21b9fa",
      "name": "RAG Agent"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        1100,
        -520
      ],
      "id": "ea4b6c54-a7a1-42dc-93f9-b40a623f5127",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "1YN20xd11svKzn15",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "Use RAG to look up information in the knowledgebase.",
        "tableName": "documents_pg",
        "topK": 40,
        "includeDocumentMetadata": false,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1.3,
      "position": [
        1240,
        -500
      ],
      "id": "6ff88c03-f905-41d0-b724-938a2b46bf5b",
      "name": "Postgres PGVector Store",
      "credentials": {
        "postgres": {
          "id": "1YN20xd11svKzn15",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        1360,
        -320
      ],
      "id": "09a1b3eb-386d-47ee-80f0-aa64bfc4ee24",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "PpcktPH83DDrHTki",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool to fetch all available documents, including the table schema if the file is a CSV or Excel file.",
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        1540,
        -520
      ],
      "id": "7964ae56-1ba7-4e02-bb93-6f6077e43db2",
      "name": "List Documents",
      "credentials": {
        "postgres": {
          "id": "1YN20xd11svKzn15",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Run a SQL query - use this to query from the document_rows table once you know the file ID (which is the file path) you are querying. dataset_id is the file_id (file path) and you are always using the row_data for filtering, which is a jsonb field that has all the keys from the file schema given in the document_metadata table.\n\nExample query:\n\nSELECT AVG((row_data->>'revenue')::numeric)\nFROM document_rows\nWHERE dataset_id = '/data/shared/document.csv';\n\nExample query 2:\n\nSELECT \n    row_data->>'category' as category,\n    SUM((row_data->>'sales')::numeric) as total_sales\nFROM dataset_rows\nWHERE dataset_id = '/data/shared/document2.csv'\nGROUP BY row_data->>'category';",
        "operation": "executeQuery",
        "query": "{{ $fromAI('sql_query') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        1660,
        -520
      ],
      "id": "cc9e6eec-f111-4a34-9b37-d6758feba57a",
      "name": "Query Document Rows",
      "credentials": {
        "postgres": {
          "id": "1YN20xd11svKzn15",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Given a file ID, fetches the text from the document.",
        "operation": "executeQuery",
        "query": "SELECT \n    string_agg(paragraph, ' ') AS document_text\nFROM document_metadata\nWHERE id = '{{ $fromAI('file_id') }}'\nGROUP BY id;",
        "options": {
          "queryReplacement": "={{ $fromAI('file_id') }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        1780,
        -520
      ],
      "id": "8d42d9a4-71c6-4171-b19b-b58637505f7c",
      "name": "Get File Contents",
      "credentials": {
        "postgres": {
          "id": "1YN20xd11svKzn15",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "qwen/qwen3-14b",
          "mode": "list",
          "cachedResultName": "qwen/qwen3-14b"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        960,
        -500
      ],
      "id": "f18a8afd-c4c5-4db2-b9c5-ee68d68d0d80",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "9t4nREE9CW5VFmnl",
          "name": "LMstudios"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "16d0be79-4a8a-4df2-8f1a-5c13c3354a75"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2ea3ffa3-c2c9-4507-8f77-7983ee72486e",
                    "leftValue": "",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        420,
        -180
      ],
      "id": "3473a288-3eba-48d0-9c2e-4dc78d66a1c3",
      "name": "Switch"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "87afd5a3-ca98-4677-bb91-e2904feda2e9",
              "leftValue": "",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        160,
        -300
      ],
      "id": "c6d48560-f7da-4816-b53e-6408ca331436",
      "name": "có chứa tag kết thúc hay không ?"
    },
    {
      "parameters": {
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        780,
        -60
      ],
      "id": "b62d5be7-f79b-4591-b5b0-5d99c6944f19",
      "name": "MedGemma"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-06-26T14:45:27.000Z",
  "versionId": "5f7657f5-a17a-459f-83c1-481d7e2b63ce"
}